{"body":{
        "contextId": "01DY2ZTPF4D7K51N898FCNHS77",
        "mindId": "01DAAQY88QZB19JQZ5PRJFR76Y",
        "instanceId": "749b0bfb-869d-4c24-9680-a6cd7543c765",
        "segments": [
            {
                "id": "11cbd053-23eb-4583-b889-a70200be00d3",
                "originalText": "All of them but a generated client ID and secret as a parameter to your request. Alright, so what I want to do now is jump in and take a look at a real world example. We're going to look at the GitHub API going to look at some of the documentation and I'll show you what happens when you make a get request and will request some user data. All right. So this is the documentation for github's API version 3 if you go to developer github.com V3 and this just basically gives you a bunch of information on the API and most public apis or most apis in general have some kind of documentation like this. So, you know what endpoints you need to use what methods are okay to use things like that. So if we take a look down here, let's see. if we look at ",
                "confidence": 0.7957289750000001,
                "startTime": "2020-01-08T16:45:41Z",
                "endTime": "2020-01-08T16:46:38Z",
                "duration": 57,
                "recordingId": "b4ccd5d3-feff-45bb-a904-2861cd73faf2",
                "spokenBy": "716067a60a1a4034abc49a12ecafb39b",
                "languageCode": "en-US",
                "transcriber": "google_speech_api",
                "status": "completed",
                "transcriptId": "f0690f86-862a-4e39-be0f-ed567425a3a6",
                "isEndOfSentence": false,
                "createdAt": "2020-01-08T16:46:39.315393421Z",
                "updatedAt": "2020-01-08T16:47:20.471668456Z",
                "deletedAt": null,
                "deleted": false
            },
            {
                "id": "160c3132-6c89-4982-9afd-bd8098734826",
                "originalText": "Exactly, see if I can get to it. ",
                "confidence": 0.83362085,
                "startTime": "2020-01-08T16:50:35Z",
                "endTime": "2020-01-08T16:50:39Z",
                "duration": 4,
                "recordingId": "d8cf6c9d-c19b-40d8-a46c-00c16e29852c",
                "spokenBy": "716067a60a1a4034abc49a12ecafb39b",
                "languageCode": "en-US",
                "transcriber": "google_speech_api",
                "status": "completed",
                "transcriptId": "f0690f86-862a-4e39-be0f-ed567425a3a6",
                "isEndOfSentence": true,
                "createdAt": "2020-01-08T16:50:39.74291153Z",
                "updatedAt": "2020-01-08T16:51:00.529774575Z",
                "deletedAt": null,
                "deleted": false
            },
            {
                "id": "19cae4c5-553a-4111-8f8d-f3f77b58a709",
                "originalText": "It's so now that we talked about what an API is let's talk about rest. So it stands for representational State transfer and it's an architecture style for Designing networked applications. It works on relying on a stateless client-server communication protocol and in almost all cases. This is going to be HTTP. All right, you guys know what HTTP is it's basically the foundation of the communication of the internet of the web every time you load a webpage. A page in your browser. It's making an HTTP request to a server somewhere. It is possible to use other protocols with rest. But HTTP is by far the most used because in order to use real-world rest you need the delivery methods that HTTP offers rest was made to treat objects on the server side as resources that can be created updated and destroyed or deleted an example of a server-side. Object would be a blog post in a database or something like that. Okay, we can help we can create these posts with a post request a delete with a delete request and so on. All right, and what makes rest so awesome is that it operates using just HTTP and usually some kind of standard like Jason so it can be used by virtually any programming language because most of the good languages can make HTTP request in some way whether it's PHP JavaScript rails Java python. All of these languages are perfectly capable of working with restful interface has alright, so hopefully I haven't lost yet. Just remember an API is the messenger and rest, lets us use HTTP requests to format those messages. You'll you may also hear the term restful API and that just refers to conforming to the rest constraints. So rest day ",
                "confidence": 0.82369615,
                "startTime": "2020-01-08T16:37:35Z",
                "endTime": "2020-01-08T16:39:35Z",
                "duration": 120,
                "recordingId": "b84ae9ec-cc7b-4f86-b4fd-8ad29f2a5fc5",
                "spokenBy": "716067a60a1a4034abc49a12ecafb39b",
                "languageCode": "en-US",
                "transcriber": "google_speech_api",
                "status": "completed",
                "transcriptId": "f0690f86-862a-4e39-be0f-ed567425a3a6",
                "isEndOfSentence": false,
                "createdAt": "2020-01-08T16:39:37.020851911Z",
                "updatedAt": "2020-01-08T16:40:18.467262948Z",
                "deletedAt": null,
                "deleted": false
            },
            {
                "id": "1dc94248-2d5e-4bda-a170-00ad628802c1",
                "originalText": "Now that we've established what a rest API is let's look at the specific methods and requests that can be made to a server through HTTP. Okay. So a get request is the most common your browser client makes get request every day just by going to a specific server you are I get requests are used to do just that they get data or retrieve data from a specified resource. Okay next. We have a post request. And you probably use these everyday as well because every time you fill out a web form you're making a post request in most cases, you can also make get requests from forms, but it's not secure and the data you submit can be seen by anyone formed form tags in HTML can take an action and a method attribute. So the action would be the page that you're submitting to and then the method would be either post or get. Okay. Those are the only two requests that can be made. Just a web form on its own. So next we have put and put will update a specified resource. Usually you would have to send a request to an end point which is a URI with some kind of ID in for that specific resource, whether it's a blog post or a product the resource itself doesn't matter but the server needs to know which one you want to update. Okay. Can't make a put a put request from Um form like you can post you'd have to use something like Ajax, you could use a standard JavaScript or you could use jQuery or something like that. And then if you're using a framework like angular you have different modules, including an HTTP module that's capable of sending puts and deletes. Okay, a delete request is just that it will delete a specified resource on a server. And again, you have to let the server know what you're deleting. So you want to send an ",
                "confidence": 0.838733425,
                "startTime": "2020-01-08T16:39:41Z",
                "endTime": "2020-01-08T16:41:41Z",
                "duration": 120,
                "recordingId": "646ffd8b-5621-4d91-98fc-95328612d3c9",
                "spokenBy": "716067a60a1a4034abc49a12ecafb39b",
                "languageCode": "en-US",
                "transcriber": "google_speech_api",
                "status": "completed",
                "transcriptId": "f0690f86-862a-4e39-be0f-ed567425a3a6",
                "isEndOfSentence": false,
                "createdAt": "2020-01-08T16:41:44.156531992Z",
                "updatedAt": "2020-01-08T16:42:25.589185479Z",
                "deletedAt": null,
                "deleted": false
            },
            {
                "id": "1f1fddef-2b61-431f-9064-f75e695d65d6",
                "originalText": "Guys, welcome to another web technology informational video in this video. We're going to talk about what a rest API is now I do have several videos on my Channel showing you how to create a rest API of couple in JavaScript and Node 1 in PHP, so you may have seen some of those but you may still have some confusion on how arrest API really works. Now you may be saying why can just Google this? Why do I have to watch the video of this video? Well if you do, Google it you'll get a thousand different explanations that are so complicated that it's nearly impossible for an entry-level developer to really grasp it. So I try to explain things on a more basic level and hopefully that's why you guys watch my videos. I try to take complicated Concepts and explain them in plain English. I'm not a real sophisticated guy. So I like things spelled out without nonsense. So that's what I try to give my viewers. Alright. So before we get into rest, let's talk about what an API is in general. So it stands for application program interface. And that's a very broad term. There's all kinds of apis, but we're specifically talking about web apis. There's apis in your computer operating system and your smartphone and even in some refrigerators and so on. So this is very generalized, but it's essentially a contract provided by one piece of software. To another piece of software usually consists of a structured request and then a structured response. So one piece of software says give me this information formatted in this way and I'll give you this data or this function or whatever that response may be. Alright, so to help you understand we're going to take a look at a couple analogies. This first one is actually from another YouTube video, which I'll link in the description using it because it's one of the best ",
                "confidence": 0.84030636,
                "startTime": "2020-01-08T16:34:13Z",
                "endTime": "2020-01-08T16:36:13Z",
                "duration": 120,
                "recordingId": "79d0c6ac-12b8-4048-ad5f-c10aa9b0365b",
                "spokenBy": "716067a60a1a4034abc49a12ecafb39b",
                "languageCode": "en-US",
                "transcriber": "google_speech_api",
                "status": "completed",
                "transcriptId": "f0690f86-862a-4e39-be0f-ed567425a3a6",
                "isEndOfSentence": false,
                "createdAt": "2020-01-08T16:36:14.206876834Z",
                "updatedAt": "2020-01-08T16:37:15.825451037Z",
                "deletedAt": null,
                "deleted": false
            },
            {
                "id": "3d38c426-76d7-44e8-b4d5-9d9856ce9a46",
                "originalText": "Along with that now there are other types of requests, but they're very rarely used ahead request is the same as get except. It doesn't return a body in the response. It will only return the head info options can be used to see the supported methods of a server and then patch is for partial resources updating partial resources, but we're not going to get into that. Okay. So let's look at some endpoint examples and points are the URI are the URL that are HTTP requests are sent to so here's an example using a sample API at mysite.com API. Okay, you can choose whatever folder you want to put your API endpoints in but many many times you'll use an API folder or even an API subdomain. Okay. So this first one here Is a endpoint for a get request and this would typically just give you a list of users. Okay would return a response with all the users and we can make a get request to a specific user by going API slash users slash and then whatever that users ID in many cases, you may have an endpoint like this where you're saying instead of just users and then the ID it would be users details and then the ID or user show or something like that. that Now in this case, we're making a post request to a pi users. And that's going to add a user to to the server to the database. Now notice that this get request in this post request have the same end point but since they're different methods are different requests. That's okay. Okay, you can use the same the same URL but they have to be different requests in this case here where he's making a put request to a pi users one or you may see something like this API users update one and that's going ",
                "confidence": 0.8402570083333334,
                "startTime": "2020-01-08T16:41:41Z",
                "endTime": "2020-01-08T16:43:41Z",
                "duration": 120,
                "recordingId": "6bf4aba8-c9b3-4c71-9365-9ba7a578dd2d",
                "spokenBy": "716067a60a1a4034abc49a12ecafb39b",
                "languageCode": "en-US",
                "transcriber": "google_speech_api",
                "status": "completed",
                "transcriptId": "f0690f86-862a-4e39-be0f-ed567425a3a6",
                "isEndOfSentence": false,
                "createdAt": "2020-01-08T16:43:46.103366876Z",
                "updatedAt": "2020-01-08T16:45:00.571299031Z",
                "deletedAt": null,
                "deleted": false
            },
            {
                "id": "3d9efa6b-b4d1-4d82-9987-f9cc2cc9e21b",
                "originalText": "I've seen so think of yourself at sitting at a table at a restaurant in your one piece of software such as a web application on the client side. And then the kitchen is the server or the service that processes certain requests. Well, the waiter is like an API. He's formatted to take a certain order in a specific way and then bring back a certain meal. This would be the data or the response that you requested. So in API is basically a messenger or a waiter between running software. All right. So another good eat another good analogy is this box here? This is toy so if we think of this as an API, it's formatted to take certain shapes. So the client has to format the request as a circle square triangle anything else won't be accepted. You'll get some kind of error message or error response. So this is similar to how an API works and you can think of these shapes. As the API standard whether it's Jason or soap or something else. So to make this operate even more like a real API, we could have some kind of output once the formatted shape request go in and that would be your response. Okay, so hopefully this gives you a good idea as to what an API is in general. ",
                "confidence": 0.8453408000000001,
                "startTime": "2020-01-08T16:36:13Z",
                "endTime": "2020-01-08T16:37:34Z",
                "duration": 81,
                "recordingId": "cfb12846-1ccc-40ae-987f-549324bf5bc5",
                "spokenBy": "716067a60a1a4034abc49a12ecafb39b",
                "languageCode": "en-US",
                "transcriber": "google_speech_api",
                "status": "completed",
                "transcriptId": "f0690f86-862a-4e39-be0f-ed567425a3a6",
                "isEndOfSentence": true,
                "createdAt": "2020-01-08T16:37:35.695527791Z",
                "updatedAt": "2020-01-08T16:38:17.071591513Z",
                "deletedAt": null,
                "deleted": false
            },
            {
                "id": "3fa47551-bceb-4605-aafe-a794bdd6d2bc",
                "originalText": "That right here place these x's and then the secret. ",
                "confidence": 0.882855,
                "startTime": "2020-01-08T16:52:09Z",
                "endTime": "2020-01-08T16:52:17Z",
                "duration": 8,
                "recordingId": "cb53d4c0-b88b-4e0b-9f61-effa13193a82",
                "spokenBy": "716067a60a1a4034abc49a12ecafb39b",
                "languageCode": "en-US",
                "transcriber": "google_speech_api",
                "status": "completed",
                "transcriptId": "f0690f86-862a-4e39-be0f-ed567425a3a6",
                "isEndOfSentence": true,
                "createdAt": "2020-01-08T16:52:17.285990252Z",
                "updatedAt": "2020-01-08T16:52:38.07482075Z",
                "deletedAt": null,
                "deleted": false
            },
            {
                "id": "79c233eb-9301-4469-bf47-95835efe343e",
                "originalText": "And restful API are essentially the same thing. ",
                "confidence": 0.69125545,
                "startTime": "2020-01-08T16:39:35Z",
                "endTime": "2020-01-08T16:39:40Z",
                "duration": 5,
                "recordingId": "5cc0f677-99a5-4d4a-bc0d-f8d3ad28c0d8",
                "spokenBy": "716067a60a1a4034abc49a12ecafb39b",
                "languageCode": "en-US",
                "transcriber": "google_speech_api",
                "status": "completed",
                "transcriptId": "f0690f86-862a-4e39-be0f-ed567425a3a6",
                "isEndOfSentence": true,
                "createdAt": "2020-01-08T16:39:40.352713746Z",
                "updatedAt": "2020-01-08T16:40:01.135848161Z",
                "deletedAt": null,
                "deleted": false
            },
            {
                "id": "a1b46a87-18d5-4474-896f-a09c625bc2ef",
                "originalText": "And we'll just grab the client ID. ",
                "confidence": 0.73214173,
                "startTime": "2020-01-08T16:52:03Z",
                "endTime": "2020-01-08T16:52:07Z",
                "duration": 4,
                "recordingId": "7756eeeb-adf6-4c26-a0ba-7d15314641ab",
                "spokenBy": "716067a60a1a4034abc49a12ecafb39b",
                "languageCode": "en-US",
                "transcriber": "google_speech_api",
                "status": "completed",
                "transcriptId": "f0690f86-862a-4e39-be0f-ed567425a3a6",
                "isEndOfSentence": true,
                "createdAt": "2020-01-08T16:52:07.88396676Z",
                "updatedAt": "2020-01-08T16:52:28.712976309Z",
                "deletedAt": null,
                "deleted": false
            },
            {
                "id": "b48917a1-9122-46ec-896b-9b7391b51516",
                "originalText": "The authenticated user so if you're authenticated as a specific user you can actually make request to update your information. Okay, so you can edit your profile. If you want to get all users. You can do that by just making a get request to slash users. So what I want to do is try this out now you can obviously do this within your your program but there's also tools that you can use to make requests. Okay. Postman is what I Just use it. It's a Chrome Google Chrome Plug-In or extension whatever it's called so you can go ahead and download that and then all you have to do is put your endpoint in here and then the type of request in some cases. You'll have to send data are maybe some header values. For instance. If you need to do authorization, you can put that in here and you can put the value. So these are key value pairs. If you need to send data you can do that as well usually You can only send data you can't do it with a get request. You can see that's grayed out. But if it was a post request you can send the body in different formats. You can send it as a form or you can send raw data or for instance raw, Json. All right, but what I'm going to do is make a get request to http API dot github.com / users. Okay, and then this is what it gives us and you can see we have basically it's an array of user objects. So this is the username the ID all the URLs and all that stuff. Okay. Now if we want to get a specific user we could say we can make a get request to just put my username. Send and then that gives us all that information on that specific user. Okay now with the GitHub API and a lot of apis you can do it like this without any kind of authentication for a certain amount of requests. ",
                "confidence": 0.8750698179999998,
                "startTime": "2020-01-08T16:48:35Z",
                "endTime": "2020-01-08T16:50:35Z",
                "duration": 120,
                "recordingId": "ccb73233-a7d0-4373-a0f7-2fa89db1f433",
                "spokenBy": "716067a60a1a4034abc49a12ecafb39b",
                "languageCode": "en-US",
                "transcriber": "google_speech_api",
                "status": "completed",
                "transcriptId": "f0690f86-862a-4e39-be0f-ed567425a3a6",
                "isEndOfSentence": true,
                "createdAt": "2020-01-08T16:50:36.754963484Z",
                "updatedAt": "2020-01-08T16:51:18.136137837Z",
                "deletedAt": null,
                "deleted": false
            },
            {
                "id": "c3108721-fac8-4d04-8eb6-0d85b5a5f87b",
                "originalText": "It's not what I want to show you. Let's go back up here. And then over here. I want to click on users. Okay, so this gives us the how to get a single user. We make a get request to slash users. And then whatever that username. Okay, when you see a colon in front of it like that that usually means that this is some kind of placeholder. So this would be whatever username you want. And then this shows you the actual response you get. Okay, so 200 status means Everything's okay. And then it gives you this in the body. Okay gives you Jason of All That users information including their username their ID the URL to their image their to their Avatar. Let's see how many let's see how many repos they have how many gists their blog their company and then all these URLs as well, which you can make other requests to and if we go down some more ",
                "confidence": 0.90353715,
                "startTime": "2020-01-08T16:47:32Z",
                "endTime": "2020-01-08T16:48:33Z",
                "duration": 61,
                "recordingId": "b2c0fb7e-f263-4e3d-a46d-71f67cef1938",
                "spokenBy": "716067a60a1a4034abc49a12ecafb39b",
                "languageCode": "en-US",
                "transcriber": "google_speech_api",
                "status": "completed",
                "transcriptId": "f0690f86-862a-4e39-be0f-ed567425a3a6",
                "isEndOfSentence": false,
                "createdAt": "2020-01-08T16:48:34.633820681Z",
                "updatedAt": "2020-01-08T16:49:15.74388782Z",
                "deletedAt": null,
                "deleted": false
            },
            {
                "id": "e5696840-0c50-48ba-a13c-ae727412aee5",
                "originalText": "Update that user. Okay, you'll have to send data along with that just as you would with a post request and then delete you can make a delete request to a pi users one and that will delete that user. Okay. Are you may see something like this users? Delete one? Okay. Now if we use endpoints like the ones we just saw without any kind of authentication of who we are those are public or open apis, but sometimes you need to authenticate before Using them. Now this can mean just register registering your app with the providers website. And even sometimes you'll have to pay for it. You'll have to purchase that data access. So there's a few ways that authentication is implemented. So usually you'll use oauth which involves getting some kind of access token and sending that along with your request. So if you temp attempt to make a request without that then you'll get some kind of unauthorized error. So here's some examples Of how it works with the GitHub API, which is a really nice API for beginners. It's really easy to use and how it works is you can use it without any kind of authentication but only up to I think it's like a hundred requests per hour. If you go over that and you didn't authorize then you're going to get an error and you're not going to be able to fetch the data. So there's a few different ways that this is implemented in these examples were using curl to make our requests curl is just Basically a tool that we can use to transfer data using multiple protocols including HTTP. So this first one here is by sending the token inside of the header. Okay inside the HTTP header so you can include a value for authorization and you would set that to your token. All right, sometimes you can even send the token as a parameter in the URI. And another common way is to not send the token it. ",
                "confidence": 0.879864775,
                "startTime": "2020-01-08T16:43:41Z",
                "endTime": "2020-01-08T16:45:41Z",
                "duration": 120,
                "recordingId": "8475d6cf-bcb3-42f9-84ea-c34e7dde8330",
                "spokenBy": "716067a60a1a4034abc49a12ecafb39b",
                "languageCode": "en-US",
                "transcriber": "google_speech_api",
                "status": "completed",
                "transcriptId": "f0690f86-862a-4e39-be0f-ed567425a3a6",
                "isEndOfSentence": true,
                "createdAt": "2020-01-08T16:45:42.369526221Z",
                "updatedAt": "2020-01-08T16:46:23.763697825Z",
                "deletedAt": null,
                "deleted": false
            },
            {
                "id": "ed2c6f65-ae86-4b0f-afd7-0073da87a33d",
                "originalText": "Yeah, here we go. And you can see API rate limit has exceeded. So you get a certain amount of requests per hour or per cup every couple hours or whatever. It may be whatever they said it too. So what we would have to do now to be able to keep using this in our application is to register it. Okay. So if we go to github.com settings applications new and let's say test app home page just say test.com application description say my app and then some kind of callback URL will just take this and let's say register application and now you can see it gives us a client ID and a client secret. So what we have to do now is just include these as a parameter. Okay, so if we go back to our documentation here and go down to Hours it authentication so we can add we can send these as a parameter. You can see right here client ID client secret. So let's take that starting with that question mark and go back to postman. ",
                "confidence": 0.8036817700000001,
                "startTime": "2020-01-08T16:50:44Z",
                "endTime": "2020-01-08T16:52:01Z",
                "duration": 77,
                "recordingId": "c47ae3cf-cdc1-4703-91f1-4b35faf89f35",
                "spokenBy": "716067a60a1a4034abc49a12ecafb39b",
                "languageCode": "en-US",
                "transcriber": "google_speech_api",
                "status": "completed",
                "transcriptId": "f0690f86-862a-4e39-be0f-ed567425a3a6",
                "isEndOfSentence": true,
                "createdAt": "2020-01-08T16:52:02.745823153Z",
                "updatedAt": "2020-01-08T16:52:44.365012702Z",
                "deletedAt": null,
                "deleted": false
            },
            {
                "id": "fe651e0c-235a-4771-9d10-70855647fa0f",
                "originalText": "Verb, so these are the different types of requests that can be made in certain endpoints. So head get post patch put and delete it shows us how you can authenticate and this is the information we saw on the slide shows us that we can authenticate through the header through a parameter and so on if we scroll down here's some more it also show you how to use pagination and you can use that by requesting a certain amount of of whatever it Is users or repository? So in this case, it's saying a hundred per page and then you can also specify the page and then you can use your programming logic to create pagination. Okay, so you only see you have a hundred per page. So on. Let's see if we go down some more. ",
                "confidence": 0.83664567,
                "startTime": "2020-01-08T16:46:39Z",
                "endTime": "2020-01-08T16:47:29Z",
                "duration": 50,
                "recordingId": "dea09016-d88c-4b1e-9576-1f493d5e93c1",
                "spokenBy": "716067a60a1a4034abc49a12ecafb39b",
                "languageCode": "en-US",
                "transcriber": "google_speech_api",
                "status": "completed",
                "transcriptId": "f0690f86-862a-4e39-be0f-ed567425a3a6",
                "isEndOfSentence": true,
                "createdAt": "2020-01-08T16:47:29.845038378Z",
                "updatedAt": "2020-01-08T16:47:50.901995227Z",
                "deletedAt": null,
                "deleted": false
            }
        ]
    }}