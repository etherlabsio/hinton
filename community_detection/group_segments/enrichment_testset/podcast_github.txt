{"body":{
        "contextId": "01DY2ZTPF4D7K51N898FCNHS77",
        "mindId": "01DAAQY88QZB19JQZ5PRJFR76Y",
        "instanceId": "2aea80c4-aa40-4d96-a4e0-30a450c5e5f6",
        "segments": [
            {
                "id": "1868d230-e4e1-4b44-ac66-225237fb6f72",
                "originalText": "Ways you can create your own action and integrate that into different workflows how to integrate them. You can create action double file in your action, which you created and inside this you can have the necessary action, which you want to perform based on the type of action, which you want to create and this can be directly integrated into your yawm Al here as a part of your workflow. So there is a Marketplace provided by GitHub action. See you can directly go to the marketplace and look out for different actions, which have been created by different countries. Computers. I'll show a Docker example in a bit. ",
                "confidence": 0.78615338,
                "startTime": "2020-01-09T10:46:36Z",
                "endTime": "2020-01-09T10:47:11Z",
                "duration": 35,
                "recordingId": "2203a7dc-b4bc-4ade-b705-7ea9d9e91760",
                "spokenBy": "716067a60a1a4034abc49a12ecafb39b",
                "languageCode": "en-US",
                "transcriber": "google_speech_api",
                "status": "completed",
                "transcriptId": "fbf16a33-3ce0-488f-9ab1-f95f053c4203",
                "isEndOfSentence": true,
                "createdAt": "2020-01-09T10:47:11.680277136Z",
                "updatedAt": "2020-01-09T10:47:32.864422123Z",
                "deletedAt": null,
                "deleted": false
            },
            {
                "id": "20e05b54-d671-4255-a098-80ff24a7013c",
                "originalText": "Gives me some steps on how to initialize my get. What I'm going to do is I'm going to enable get for this particular project. So let me open the terminal get in it. You also need to add my remote repository, but let me add my username here so that it can detect directly. ",
                "confidence": 0.82831085,
                "startTime": "2020-01-09T10:48:29Z",
                "endTime": "2020-01-09T10:48:49Z",
                "duration": 20,
                "recordingId": "28e14482-87a0-4d1f-a216-8d5f8686931a",
                "spokenBy": "716067a60a1a4034abc49a12ecafb39b",
                "languageCode": "en-US",
                "transcriber": "google_speech_api",
                "status": "completed",
                "transcriptId": "fbf16a33-3ce0-488f-9ab1-f95f053c4203",
                "isEndOfSentence": true,
                "createdAt": "2020-01-09T10:48:50.342978906Z",
                "updatedAt": "2020-01-09T10:49:13.954136509Z",
                "deletedAt": null,
                "deleted": false
            },
            {
                "id": "29ac8b14-81f2-4df6-991a-978cd8f5880a",
                "originalText": "Film even got succeeded I can see my whole Maven logs here. The bill took 20 seconds see them even census. Yeah, you may even build taxes is here and finally the job got completed and it just cleaned up your processes which it created in the background. So this is a workflow inside ketab action. So basically it is a CI CD pipeline inside your GitHub repository. For open source projects. It is completely free and you can use this for building your artifacts publishing them onto your package registry. We if you have any or deploy into any cloud provider from your repository itself, I found GitHub actions to be pretty useful and it was pretty amazing how the seamless integration of GitHub actions is present within GitHub repository. If you want to try out GitHub options definitely clone this repository. I will leave the link for this particular repository in the description below. You can create a new repository and do the steps what I did to get creative actions working. I hope you found this particular video interesting and useful. Let me know if you have any specific use case targeting with GitHub actions. I can definitely give it a try as always if you like the video go ahead and like it if you haven't subscribed to the channel go ahead and subscribe to it meet again in the next video. Thank you very much. ",
                "confidence": 0.8728412099999999,
                "startTime": "2020-01-09T10:55:06Z",
                "endTime": "2020-01-09T10:56:26Z",
                "duration": 80,
                "recordingId": "594ffaba-1c9d-446c-ab7c-34dda05663c5",
                "spokenBy": "716067a60a1a4034abc49a12ecafb39b",
                "languageCode": "en-US",
                "transcriber": "google_speech_api",
                "status": "completed",
                "transcriptId": "fbf16a33-3ce0-488f-9ab1-f95f053c4203",
                "isEndOfSentence": true,
                "createdAt": "2020-01-09T10:56:27.305862766Z",
                "updatedAt": "2020-01-09T10:57:08.572775741Z",
                "deletedAt": null,
                "deleted": false
            },
            {
                "id": "39b2c96a-2185-428e-b519-45fa2819dcef",
                "originalText": "Nothing fancy here right. Now. What I'm going to do is I'm going to create a new report and integrate this project with it. ",
                "confidence": 0.8782595,
                "startTime": "2020-01-09T10:48:11Z",
                "endTime": "2020-01-09T10:48:19Z",
                "duration": 8,
                "recordingId": "6d584e83-fe07-4623-978e-2b5d7c28ecaa",
                "spokenBy": "716067a60a1a4034abc49a12ecafb39b",
                "languageCode": "en-US",
                "transcriber": "google_speech_api",
                "status": "completed",
                "transcriptId": "fbf16a33-3ce0-488f-9ab1-f95f053c4203",
                "isEndOfSentence": true,
                "createdAt": "2020-01-09T10:48:19.415394852Z",
                "updatedAt": "2020-01-09T10:48:40.54771279Z",
                "deletedAt": null,
                "deleted": false
            },
            {
                "id": "39e93c16-fcea-430b-8abc-7505de585f07",
                "originalText": "You can have different dependencies. You can define something called needs and you can have different dependencies between your steps in your workflow. The other could part is GitHub actions is completely free for public repositories. All our GitHub repositories in Tech primers are public and I can integrate directly Market abductions into any repository for the sake of this video. I'm going to create a new repository and I'll show you how you can use GitHub actions in it as usual. Let's go to our favorite place start at Spring dot IO I'm going to create a simple Maven spring boot project and I'm going to commit that into my new repository and enable GitHub actions with a workflow in it. I'm going to call this as GitHub - actions iPhone example. I'm going to add some actuator and web Divinity just for the sake of it. I'll generate this project. ",
                "confidence": 0.8590479874999999,
                "startTime": "2020-01-09T10:47:11Z",
                "endTime": "2020-01-09T10:48:05Z",
                "duration": 54,
                "recordingId": "ea9683cd-fcaa-4a50-bfdb-de648d97e01c",
                "spokenBy": "716067a60a1a4034abc49a12ecafb39b",
                "languageCode": "en-US",
                "transcriber": "google_speech_api",
                "status": "completed",
                "transcriptId": "fbf16a33-3ce0-488f-9ab1-f95f053c4203",
                "isEndOfSentence": true,
                "createdAt": "2020-01-09T10:48:06.12502974Z",
                "updatedAt": "2020-01-09T10:48:47.607694542Z",
                "deletedAt": null,
                "deleted": false
            },
            {
                "id": "3e8b0cb6-737b-46aa-800d-51efd6009484",
                "originalText": "Get something for Docker. So I need to build this particular Maven image as Docker image and I to get it I can select a particular version of a contributor library and I can use that and these are the documentation information of this particular action. Let's try picking one called Docker if you want to look at the marketplace listing you can directly click on this and this will take you to the complete information. For example, this particular Docker push has a documentation on how you can use it see that there is a build and push for Docker Hub. There's a built-in push option for GitHub package and Amazon, Isha. These are different contributor libraries. If you notice these are contributor libraries provided by the open source contributors, and these are not get up specific actions and you can use these action links and directly integrate them into this particular month right now. I'm not going to do that. But that is how you can integrate different actions into your workflow. So let's try to commit this. And see what happens. The moment I committed I don't see any option here. But I need to go to the actions tab. So the moment I click on actions tab. I can see that there are different workflows in it. There is a workflow call continuous integration. If you remember that is the workflow which we named it with and you can see that this workflow is running on Master it got trigger 13 seconds ago on a push and the moment I click on continuous integration and this allows me to see different stages on what's Happening and the logs are just rolling here. So this is basically a CI CD pipeline inside my GitHub repository itself. And this particular action got triggered based on my push on to this particular Rebel see that right now, my build Maven is running before that setup. Java was run Java 8 version is getting used before that my code got checked out. So these are the different commands which it ran to just check out my core and let's look at the funding stage. Yeah looks like the ",
                "confidence": 0.85116453,
                "startTime": "2020-01-09T10:53:06Z",
                "endTime": "2020-01-09T10:55:06Z",
                "duration": 120,
                "recordingId": "4566bbfe-0ed1-4507-86de-1363ca60d1dc",
                "spokenBy": "716067a60a1a4034abc49a12ecafb39b",
                "languageCode": "en-US",
                "transcriber": "google_speech_api",
                "status": "completed",
                "transcriptId": "fbf16a33-3ce0-488f-9ab1-f95f053c4203",
                "isEndOfSentence": false,
                "createdAt": "2020-01-09T10:55:07.55719579Z",
                "updatedAt": "2020-01-09T10:56:09.3287736Z",
                "deletedAt": null,
                "deleted": false
            },
            {
                "id": "3fa76840-79fc-472b-93cc-dc13859eeca6",
                "originalText": "Right and the version at d 1 is nothing but the tag which is under this repository. So previously we saw the actions repository under which we had a check out action and we are now using the version 1 of that particular repository that is four steps. So there will be first tip which will just check out the repository. The next step is setting up the Java environment. So you can Define different names for each and every step the first step doesn't have any name, but you can provide a name as well. The second step is setting up Jade. EK 1.8. So it just says uses action set up and Java. So again get AB actions team has provided something called set up - Java which provides a Java and time so we are going to use that if you're using Java 11, you can change this to Java 1.11 here. We are using the Java version 1.8 and that's why we're using something called with with this basically useful. When you want to provide an argument to this particular setup Java. So in this case, we are providing the argument as Java version and the version we wanted. 1.8. And that's what we are doing here. Finally. We are going to build our artifact using Maven and that's the next step. It just says build with Maven and you can Define your own commands. If you have already in this case GitHub actions has given me the step called Maven - be package file for maximum. So we were just going to build the project using the maven build system. So that's it for now. I'm not going to push this particular artifact anywhere if you want to deploy your artifacts into a cloud provider or something you can add those tips here. If you look at the marketplace options in the right hand side, you can see that different featured actions are present here. You can search for different actions in you can add them. For example, if you want to deploy into a shoe you can definitely get those Jour specific Marketplace options and then add them here the moment I click on for example, the user login I can see that this is a specific Market Place actions, which I can add onto my workflow so I don't want us to do right now, but let's say I want to ",
                "confidence": 0.7923878,
                "startTime": "2020-01-09T10:51:06Z",
                "endTime": "2020-01-09T10:53:06Z",
                "duration": 120,
                "recordingId": "f1783db0-52db-4452-a036-79044ed36081",
                "spokenBy": "716067a60a1a4034abc49a12ecafb39b",
                "languageCode": "en-US",
                "transcriber": "google_speech_api",
                "status": "completed",
                "transcriptId": "fbf16a33-3ce0-488f-9ab1-f95f053c4203",
                "isEndOfSentence": false,
                "createdAt": "2020-01-09T10:53:07.392495887Z",
                "updatedAt": "2020-01-09T10:54:08.886587561Z",
                "deletedAt": null,
                "deleted": false
            },
            {
                "id": "492ddf52-d206-4f3d-acfa-2d3382057c01",
                "originalText": "Unzip it and I'm opening now and IntelliJ. ",
                "confidence": 0.79738647,
                "startTime": "2020-01-09T10:48:06Z",
                "endTime": "2020-01-09T10:48:10Z",
                "duration": 4,
                "recordingId": "fa3e3578-34f8-40b1-a661-46fcd799beac",
                "spokenBy": "716067a60a1a4034abc49a12ecafb39b",
                "languageCode": "en-US",
                "transcriber": "google_speech_api",
                "status": "completed",
                "transcriptId": "fbf16a33-3ce0-488f-9ab1-f95f053c4203",
                "isEndOfSentence": true,
                "createdAt": "2020-01-09T10:48:10.959749531Z",
                "updatedAt": "2020-01-09T10:48:32.936774241Z",
                "deletedAt": null,
                "deleted": false
            },
            {
                "id": "594dbcff-bd5a-49b7-bb38-f28482cc539b",
                "originalText": "Look at my workflow results all these are integrated within the repository itself and you can take a look at them right from your GitHub web page. Now. How do I create these workflows? The book plus can be created using configuration file. Obviously, everything is available these days so you can create a ahmal file. For example. This is a sample CI 2 p.m. Where there are different configuration steps based on these steps. Your workflow will be triggered. So there are different actions which you can integrate. Let's say you want to perform a particular task and you need to perform this task or an action in different repositories get a provides a way for you to create a separate repository and use that repository as an action. For example, if somebody wants to push a Docker image the docker image push can be an action created by a central contributor and that can be used here directly into your double file. so all these actions are individual reports, for example, if I go to github.com action / check out I can see my check out actions. ",
                "confidence": 0.843649595,
                "startTime": "2020-01-09T10:45:18Z",
                "endTime": "2020-01-09T10:46:32Z",
                "duration": 74,
                "recordingId": "90e96264-cd32-4dd2-81cd-176cd1361118",
                "spokenBy": "716067a60a1a4034abc49a12ecafb39b",
                "languageCode": "en-US",
                "transcriber": "google_speech_api",
                "status": "completed",
                "transcriptId": "fbf16a33-3ce0-488f-9ab1-f95f053c4203",
                "isEndOfSentence": true,
                "createdAt": "2020-01-09T10:46:33.690167349Z",
                "updatedAt": "2020-01-09T10:47:15.080392078Z",
                "deletedAt": null,
                "deleted": false
            },
            {
                "id": "6f047e4d-fadd-49e9-a688-d939cbf98535",
                "originalText": "So I've created my springboard project and I have pushed it into my new repository called GitHub actions example Let me refresh this. I can see that my GitHub actions repo has got pushed here. Now in order to enable the actions I can go to the actions tab. So first time I want to create something from an existing template and if you look at it GitHub actions such as me some default ones, so it is getting sort of it creative action through the workflow to build test and deploy a code. Make code reviews Branch management and you should try edging work the way you want. This is a maven project. So I'm going to choose the maven option. So if I click on setup this workflow, this is going to create a default workflow for me using Maven. Let's click on the setup this workflow option see that by default. It has created a file called Maven dot yambol under the folder called GitHub and workflows so dot kid up is the folder under which you can create different workflows. You can name this workflow as anything. So in this case, I'm going to create CID. Document instead of maybe not Yama like in just provide CIA document and I can throw it a different name to this particular workflow. So I'm going to call this as continuous integration. I'm not going to deploy this anyway right now, so I'm just going to name it as continuous integration. That's it and by default if you see there is a event which has been integrated. It says on push basically if somebody pushes any code into this repository this workflow should be triggered and that's what this This particular statement being on push the next step is jobs. And then there is something called bill so build defines. What is the stage? This is a build stage. And where do we want to build it? We want to build it on a bun to let us machine. That's what it says runs on the build runs on you want your latest and the first step is using the actions check out. Basically. I want to check out this particular. ",
                "confidence": 0.8324933120000001,
                "startTime": "2020-01-09T10:49:06Z",
                "endTime": "2020-01-09T10:51:06Z",
                "duration": 120,
                "recordingId": "79688a60-2e7e-4f82-a989-76f5dd37907a",
                "spokenBy": "716067a60a1a4034abc49a12ecafb39b",
                "languageCode": "en-US",
                "transcriber": "google_speech_api",
                "status": "completed",
                "transcriptId": "fbf16a33-3ce0-488f-9ab1-f95f053c4203",
                "isEndOfSentence": true,
                "createdAt": "2020-01-09T10:51:07.367130838Z",
                "updatedAt": "2020-01-09T10:52:08.948629384Z",
                "deletedAt": null,
                "deleted": false
            },
            {
                "id": "919c8134-681d-4212-b3b2-14b3a843f54f",
                "originalText": "Going to do a guitar. So this will add all my files and let's commit this and then push it. ",
                "confidence": 0.8153017,
                "startTime": "2020-01-09T10:48:52Z",
                "endTime": "2020-01-09T10:49:00Z",
                "duration": 8,
                "recordingId": "eeceddf3-33aa-40ed-9e31-a4b642a86254",
                "spokenBy": "716067a60a1a4034abc49a12ecafb39b",
                "languageCode": "en-US",
                "transcriber": "google_speech_api",
                "status": "completed",
                "transcriptId": "fbf16a33-3ce0-488f-9ab1-f95f053c4203",
                "isEndOfSentence": true,
                "createdAt": "2020-01-09T10:49:00.904667805Z",
                "updatedAt": "2020-01-09T10:49:22.029062609Z",
                "deletedAt": null,
                "deleted": false
            },
            {
                "id": "b2835154-8d15-439d-b0d6-4dd57f4c958b",
                "originalText": "Stuff is use GitHub for storing code recently get up launched something called package registry and you would have seen a video on that on how to upload our Docker images or Maven artifacts into the GitHub provided package registry few weeks back. I created a poll on what is the video which you would like to see next whether it is the AWS free tire blind spots or the GitHub actions or was a jerk and most of you voted for GitHub actions. And in this video we're going to take a look at it about actions and how can you integrate different actions created by different contributors in the OR CI CD pipeline inside GitHub. Let's get started. There's the Bell icon on the YouTube app and never miss any update from Tech primer using GitHub actions. You can automate your work flow from your code repository into your deployment enrollment. This could be either AWS or Azure or gcp or wherever it is. You can create your into and see ICD pipeline using GitHub actions right from your GitHub repository, you know. Sign up integrative actions, you can go to the link github.com /features /font and click on the sign up for beta but however, GitHub actions is already GA and everybody will have the GitHub actions option in their repository. So there is a new tab, which you could see under your repository. For example, this is a repository called container images under Tech primers and I can see a tab called actions. This is nothing but GitHub actions right now if you see this Repository Tree has only readme files and nothing else. If you want to set up a CI CD pipeline just like that. You can click on actions and GitHub. ",
                "confidence": 0.86949805,
                "startTime": "2020-01-09T10:41:18Z",
                "endTime": "2020-01-09T10:43:18Z",
                "duration": 120,
                "recordingId": "095adbd9-ef63-4920-8790-669c25f326e3",
                "spokenBy": "716067a60a1a4034abc49a12ecafb39b",
                "languageCode": "en-US",
                "transcriber": "google_speech_api",
                "status": "completed",
                "transcriptId": "fbf16a33-3ce0-488f-9ab1-f95f053c4203",
                "isEndOfSentence": true,
                "createdAt": "2020-01-09T10:43:19.725374765Z",
                "updatedAt": "2020-01-09T10:44:21.358972534Z",
                "deletedAt": null,
                "deleted": false
            },
            {
                "id": "eab6ebbb-a225-45d9-94a6-87bfc74e6faa",
                "originalText": "Automated workflow for you so that you can create the pipeline before creating the pipeline. Let's understand what GitHub actions is using GitHub actions. You can have parallel workflows run based on GitHub events. These events could be pull request or code comets or if somebody creates an issue, you can create a workflow request and these are hooked into these GitHub events and you can trigger workflows based on these events are already using Jenkins then imagine. GitHub actions similar to what Jenkins provides however, you can create these work flows within your GitHub repository itself and you don't have to navigate to a separate web page for it. Every book flow is integrated into your GitHub repository itself. If you want to see what's happening with your bill, you can directly navigate to the actions tab and you can take a look at the workflow in it. So I'll show that in a bit once we create the workflow using these workflows generally people tend to build test and published. Artifacts and the build pipelines run usually on a Linux machine or a Mac OS or Windows Mail. You can Define whichever OS you need you can have these workflows run in parallel GitHub actions also supports node.js python Java Ruby PHP Gore as dotnet and and different versions of these languages a classic example of a use case for GitHub action is if somebody raises a pull request to your repository, you can have a build run based on the pull request and before you can can review the code you will be able to see what are the different checks which the build went through and you can get these feedbacks right on your pull request directly. You don't have to have any integration platform to integrate these into your repository from my usage of GitHub actions in the last few months. I can see there is a seamless integration between these eicd pipeline their steps within the repository itself. So I don't have to navigate to a separate bill system or a continuous integration platform. ",
                "confidence": 0.891649535,
                "startTime": "2020-01-09T10:43:18Z",
                "endTime": "2020-01-09T10:45:18Z",
                "duration": 120,
                "recordingId": "4d963e8f-d3a9-4f1d-97bd-4bdf4d712dec",
                "spokenBy": "716067a60a1a4034abc49a12ecafb39b",
                "languageCode": "en-US",
                "transcriber": "google_speech_api",
                "status": "completed",
                "transcriptId": "fbf16a33-3ce0-488f-9ab1-f95f053c4203",
                "isEndOfSentence": true,
                "createdAt": "2020-01-09T10:45:19.537626446Z",
                "updatedAt": "2020-01-09T10:46:21.088341486Z",
                "deletedAt": null,
                "deleted": false
            }
        ]
    }
}